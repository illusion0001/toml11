<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>reference on toml11</title><link>https://toruniina.github.io/toml11/docs/reference/</link><description>Recent content in reference on toml11</description><generator>Hugo</generator><language>en</language><atom:link href="https://toruniina.github.io/toml11/docs/reference/index.xml" rel="self" type="application/rss+xml"/><item><title>color.hpp</title><link>https://toruniina.github.io/toml11/docs/reference/color/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toruniina.github.io/toml11/docs/reference/color/</guid><description>color.hpp # In color.hpp, functions related to colorizing error messages are defined.
Colors are specified using ANSI escape code. In terminals or other output destinations that do not support ANSI escape code, the output may become difficult to read.
Macros # TOML11_COLORIZE_ERROR_MESSAGE # If this macro is defined during compilation (-DTOML11_COLORIZE_ERROR_MESASGE), error messages are colored by default.
If not defined, colors are not applied by default. You need to specify them using toml::color::enable().</description></item><item><title>comments.hpp</title><link>https://toruniina.github.io/toml11/docs/reference/comments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toruniina.github.io/toml11/docs/reference/comments/</guid><description>comments.hpp # In comments.hpp, comment containers are provided.
toml::preserve_comments # preserve_comments is a container that preserves comments.
It has all the member functions of std::vector&amp;lt;std::string&amp;gt;.
Comments are preserved as std::string. If the comment does not start with #, it will be prefixed with # during output. However, this prefixing is not done when adding comments to the container.
Spaces are not automatically added, so if you want a space immediately after #, either start the comment with a space or pass the comment with #.</description></item><item><title>conversion.hpp</title><link>https://toruniina.github.io/toml11/docs/reference/conversion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toruniina.github.io/toml11/docs/reference/conversion/</guid><description> conversion.hpp # Provides macros to automatically define conversion functions for supporting user-defined types with toml::get and toml::find.
TOML11_DEFINE_CONVERSION_NON_INTRUSIVE(NAME, ...) Example # namespace foo { struct Foo { std::string s; double d; int i; }; } // foo TOML11_DEFINE_CONVERSION_NON_INTRUSIVE(foo::Foo, s, d, i) Related # from.hpp into.hpp</description></item><item><title>datetime.hpp</title><link>https://toruniina.github.io/toml11/docs/reference/datetime/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toruniina.github.io/toml11/docs/reference/datetime/</guid><description>datetime.hpp # Defines a class that stores date and time information used in TOML&amp;rsquo;s datetime.
enum class month_t # Enum class to specify months.
Due to its relationship with std::tm, local_date treats January as 0. To avoid confusion, month_t allows specification of months by their names.
namespace toml { enum class month_t : std::uint8_t { Jan = 0, Feb = 1, Mar = 2, Apr = 3, May = 4, Jun = 5, Jul = 6, Aug = 7, Sep = 8, Oct = 9, Nov = 10, Dec = 11 }; } local_date # local_date holds a date.</description></item><item><title>error_info.hpp</title><link>https://toruniina.github.io/toml11/docs/reference/error_info/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toruniina.github.io/toml11/docs/reference/error_info/</guid><description>error_info.hpp # In error_info.hpp, definitions for error_info and functions to format it are provided.
toml::error_info # namespace toml { struct error_info { error_info(std::string t, source_location l, std::string m, std::string s = &amp;#34;&amp;#34;); error_info(std::string t, std::vector&amp;lt;std::pair&amp;lt;source_location, std::string&amp;gt;&amp;gt; l, std::string s = &amp;#34;&amp;#34;); std::string const&amp;amp; title() const noexcept; std::string &amp;amp; title() noexcept; std::vector&amp;lt;std::pair&amp;lt;source_location, std::string&amp;gt;&amp;gt; const&amp;amp; locations() const noexcept; void add_locations(source_location loc, std::string msg) noexcept; std::string const&amp;amp; suffix() const noexcept; std::string &amp;amp; suffix() noexcept; }; template&amp;lt;typename .</description></item><item><title>exception.hpp</title><link>https://toruniina.github.io/toml11/docs/reference/exception/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toruniina.github.io/toml11/docs/reference/exception/</guid><description>exception.hpp # toml::exception # Base class for exception types defined in toml11.
namespace toml { struct exception : public std::exception { public: virtual ~exception() noexcept override = default; virtual const char* what() const noexcept override {return &amp;#34;&amp;#34;;} }; } // toml Member Functions # Destructor # virtual ~exception() noexcept override = default; Override when derived.
what # virtual const char* what() const noexcept override {return &amp;#34;&amp;#34;;} Returns the error message.</description></item><item><title>find.hpp</title><link>https://toruniina.github.io/toml11/docs/reference/find/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toruniina.github.io/toml11/docs/reference/find/</guid><description>find.hpp # This function searches for a value in a toml::value and performs type conversion if necessary.
toml::value can change the type it stores, and toml::find accommodates these types. Technically, all functions use toml::basic_value&amp;lt;TC&amp;gt;. However, for simplicity, we refer to it as toml::value in explanations unless a distinction is necessary. In the documentation, if the template parameter TC changes the type, assume that types like toml::value::integer_type will also change accordingly.</description></item><item><title>format.hpp</title><link>https://toruniina.github.io/toml11/docs/reference/format/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toruniina.github.io/toml11/docs/reference/format/</guid><description>format.hpp # Defines structures and enumerations related to formatting information for toml::value.
indent_char # An enumeration representing the indentation character choice.
enum class indent_char : std::uint8_t { space, // use space tab, // use tab none // no indent }; std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const indent_char&amp;amp; c); std::string to_string(const indent_char); Choosing none means no indentation is used, regardless of the value in super tables.
If both space and tab are specified within the serializable value, the behavior is unspecified; typically, the unspecified indentation character appears.</description></item><item><title>from.hpp</title><link>https://toruniina.github.io/toml11/docs/reference/from/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toruniina.github.io/toml11/docs/reference/from/</guid><description>from.hpp # Defines a struct used for conversion from toml::value in toml::get and toml::find.
You can achieve the same functionality by adding a from_toml member function, but for classes where you cannot add member functions, use from&amp;lt;T&amp;gt;.
This file does not provide specific implementations. Please specialize this struct when using.
namespace toml { template&amp;lt;typename T&amp;gt; struct from; } // toml Example # namespace extlib { struct foo { int a; std::string b; }; } // extlib #include &amp;lt;toml11/from.</description></item><item><title>get.hpp</title><link>https://toruniina.github.io/toml11/docs/reference/get/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toruniina.github.io/toml11/docs/reference/get/</guid><description>get.hpp # These are functions for extracting values from toml::value and performing type conversions if necessary.
toml::value can change the type it stores, and toml::get accommodates these types. Technically, all functions use toml::basic_value&amp;lt;TC&amp;gt;. However, for simplicity, we refer to it as toml::value in explanations unless a distinction is necessary. In the documentation, if the template parameter TC changes the type, assume that types like toml::value::integer_type will also change accordingly. toml::get&amp;lt;T&amp;gt; # Overview # Generally, toml::get behaves as follows: You specify T as in toml::get&amp;lt;int&amp;gt;(v).</description></item><item><title>into.hpp</title><link>https://toruniina.github.io/toml11/docs/reference/into/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toruniina.github.io/toml11/docs/reference/into/</guid><description>into.hpp # Defines a struct used for conversion from user-defined types into toml::value constructors.
You can achieve the same functionality by adding an into_toml member function, but for classes where you cannot add member functions, use into&amp;lt;T&amp;gt;.
This file does not provide specific implementations. Please specialize this struct when using.
namespace toml { template&amp;lt;typename T&amp;gt; struct into; } // toml Example # namespace extlib { struct foo { int a; std::string b; }; } // extlib #include &amp;lt;toml11/into.</description></item><item><title>literal.hpp</title><link>https://toruniina.github.io/toml11/docs/reference/literal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toruniina.github.io/toml11/docs/reference/literal/</guid><description>literal.hpp # In literal.hpp, the _toml literal is defined.
The _toml literal parses string literals into toml::value.
namespace toml { inline namespace literals { inline namespace toml_literals { toml::value operator&amp;#34;&amp;#34; _toml(const char* str, std::size_t len); toml::value operator&amp;#34;&amp;#34; _toml(const char8_t* str, std::size_t len); // Available in C++20 and later } // toml_literals } // literals } // toml Free Functions # operator&amp;quot;&amp;quot; _toml(const char*) # toml::value operator&amp;#34;&amp;#34; _toml(const char* str, std::size_t len); Converts a string literal into a toml::value by parsing it.</description></item><item><title>ordered_map.hpp</title><link>https://toruniina.github.io/toml11/docs/reference/ordered_map/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toruniina.github.io/toml11/docs/reference/ordered_map/</guid><description>ordered_map.hpp # Defines toml::ordered_map, which is used to maintain the order of values in a file.
class ordered_map # namespace toml { template&amp;lt;typename Key, typename Val, typename Cmp = std::equal_to&amp;lt;Key&amp;gt;, typename Allocator = std::allocator&amp;lt;std::pair&amp;lt;Key, Val&amp;gt;&amp;gt;&amp;gt; class ordered_map; } The ordered_map is a map type that preserves the insertion order of values, allowing iteration in that order.
As a linear container, searches require O(n) time relative to the number of elements.</description></item><item><title>parser.hpp</title><link>https://toruniina.github.io/toml11/docs/reference/parser/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toruniina.github.io/toml11/docs/reference/parser/</guid><description>parser.hpp # Defines functions for parsing files or strings and the exceptions they use.
While parse throws an exception on failure, try_parse returns error information.
parse # Parses the content of a given file and returns a toml::basic_value.
In case of failure, toml::syntax_error is thrown.
The type information of basic_value is provided by a template, and the TOML language version is specified by toml::spec.
parse(std::string filename, toml::spec) # namespace toml { template&amp;lt;typename TC = type_config&amp;gt; basic_value&amp;lt;TC&amp;gt; parse(std::string fname, spec s = spec::default_version()); } Parses the content of the given filename.</description></item><item><title>result.hpp</title><link>https://toruniina.github.io/toml11/docs/reference/result/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toruniina.github.io/toml11/docs/reference/result/</guid><description>result.hpp # result.hpp defines the result type, which can hold either a success value or a failure value.
This is used as the return type for toml::try_parse, which does not throw exceptions.
success # A type that holds a success value.
namespace toml { template&amp;lt;typename T&amp;gt; struct success { using value_type = T; explicit success(value_type v); ~success() = default; success(const success&amp;amp;) = default; success(success&amp;amp;&amp;amp;) = default; success&amp;amp; operator=(const success&amp;amp;) = default; success&amp;amp; operator=(success&amp;amp;&amp;amp;) = default; template&amp;lt;typename U&amp;gt; explicit success(U&amp;amp;&amp;amp; v); template&amp;lt;typename U&amp;gt; explicit success(success&amp;lt;U&amp;gt; v); value_type&amp;amp; get() noexcept; value_type const&amp;amp; get() const noexcept; }; template&amp;lt;typename T&amp;gt; success&amp;lt;typename std::decay&amp;lt;T&amp;gt;::type&amp;gt; ok(T&amp;amp;&amp;amp; v); template&amp;lt;std::size_t N&amp;gt; success&amp;lt;std::string&amp;gt; ok(const char (&amp;amp;literal)[N]) } Member Types # using value_type = T; The type of the success value.</description></item><item><title>serializer.hpp</title><link>https://toruniina.github.io/toml11/docs/reference/serializer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toruniina.github.io/toml11/docs/reference/serializer/</guid><description>serializer.hpp # format # Serializes the data.
namespace toml { template&amp;lt;typename TC&amp;gt; std::string format(const basic_value&amp;lt;TC&amp;gt;&amp;amp; v, const spec s = spec::default_version()); template&amp;lt;typename TC&amp;gt; std::string format(const typename basic_value&amp;lt;TC&amp;gt;::key_type&amp;amp; k, const basic_value&amp;lt;TC&amp;gt;&amp;amp; v, const spec s = spec::default_version()); template&amp;lt;typename TC&amp;gt; std::string format(const std::vector&amp;lt;typename basic_value&amp;lt;TC&amp;gt;::key_type&amp;gt;&amp;amp; ks, const basic_value&amp;lt;TC&amp;gt;&amp;amp; v, const spec s = spec::default_version()); } If there&amp;rsquo;s a conflict between the format information and the spec, for example, when using v1.0.0 with table_format::multiline_oneline, the spec takes precedence.</description></item><item><title>source_location.hpp</title><link>https://toruniina.github.io/toml11/docs/reference/source_location/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toruniina.github.io/toml11/docs/reference/source_location/</guid><description>source_location.hpp # source_location.hpp defines a class representing a specific area within a TOML file.
This class is used to represent problematic areas in error messages.
toml::source_location # source_location is a class representing a specific area within a TOML file.
namespace toml { struct source_location { public: explicit source_location(/* implementation-defined */); ~source_location() = default; source_location(source_location const&amp;amp;) = default; source_location(source_location &amp;amp;&amp;amp;) = default; source_location&amp;amp; operator=(source_location const&amp;amp;) = default; source_location&amp;amp; operator=(source_location &amp;amp;&amp;amp;) = default; bool is_ok() const noexcept; std::size_t length() const noexcept; std::size_t first_line_number() const noexcept; std::size_t first_column_number() const noexcept; std::size_t last_line_number() const noexcept; std::size_t last_column_number() const noexcept; std::string const&amp;amp; file_name() const noexcept; std::size_t num_lines() const noexcept; std::string const&amp;amp; first_line() const; std::string const&amp;amp; last_line() const; std::vector&amp;lt;std::string&amp;gt; const&amp;amp; lines() const noexcept; }; template&amp;lt;typename .</description></item><item><title>spec.hpp</title><link>https://toruniina.github.io/toml11/docs/reference/spec/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toruniina.github.io/toml11/docs/reference/spec/</guid><description>spec.hpp # spec.hpp defines classes for specifying the version of TOML.
toml::semantic_version # semantic_version is a class that stores version information.
namespace toml { struct semantic_version { constexpr semantic_version(std::uint32_t mjr, std::uint32_t mnr, std::uint32_t p) noexcept; std::uint32_t major; std::uint32_t minor; std::uint32_t patch; }; constexpr semantic_version make_semver(std::uint32_t major, std::uint32_t minor, std::uint32_t patch) noexcept; constexpr bool operator==(const semantic_version&amp;amp;, const semantic_version&amp;amp;) noexcept; constexpr bool operator!=(const semantic_version&amp;amp;, const semantic_version&amp;amp;) noexcept; constexpr bool operator&amp;lt; (const semantic_version&amp;amp;, const semantic_version&amp;amp;) noexcept; constexpr bool operator&amp;lt;=(const semantic_version&amp;amp;, const semantic_version&amp;amp;) noexcept; constexpr bool operator&amp;gt; (const semantic_version&amp;amp;, const semantic_version&amp;amp;) noexcept; constexpr bool operator&amp;gt;=(const semantic_version&amp;amp;, const semantic_version&amp;amp;) noexcept; std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const semantic_version&amp;amp; ver); } //toml Member Functions # Constructor # constexpr semantic_version(std::uint32_t mjr, std::uint32_t mnr, std::uint32_t p) noexcept; Constructs a semantic_version instance with the specified major, minor, and patch version numbers.</description></item><item><title>toml_fwd.hpp</title><link>https://toruniina.github.io/toml11/docs/reference/toml_fwd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toruniina.github.io/toml11/docs/reference/toml_fwd/</guid><description>toml_fwd.hpp # toml_fwd.hpp contains forward declarations of structures defined in toml11 and macro definitions.
When only forward declarations of toml11 structures are needed and implementation is not required, including toml_fwd.hpp instead of toml.hpp can reduce compilation time.
Since this file only contains forward declarations, you cannot use toml::table, defined as toml::basic_value&amp;lt;toml::type_config&amp;gt;::table_type, and similarly defined toml::array. This is because they require the implementation of basic_value. This header file and toml.hpp are located under ${TOML11_INCLUDE_DIR}/, while other header files are located under ${TOML11_INCLUDE_DIR}/toml11/.</description></item><item><title>toml.hpp</title><link>https://toruniina.github.io/toml11/docs/reference/toml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toruniina.github.io/toml11/docs/reference/toml/</guid><description>toml.hpp # toml.hpp includes all other headers.
This allows access to all features of toml11.
This header file and toml_fwd.hpp are located under ${TOML11_INCLUDE_DIR}/, while other header files are located under ${toml11_include_dir}/toml11/.</description></item><item><title>types.hpp</title><link>https://toruniina.github.io/toml11/docs/reference/types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toruniina.github.io/toml11/docs/reference/types/</guid><description>types.hpp # This document defines classes that specifies type information.
type_config # type_config is a type that encapsulates parameters given to toml::basic_value.
When using different types within toml::basic_value&amp;lt;T&amp;gt;, you need to define and pass this type separately. All elements listed are required.
If you use numerical types that cannot use standard stream operators, define and replace the equivalents for read_int and read_float.
namespace toml { struct type_config { using comment_type = preserve_comments; using boolean_type = bool; using integer_type = std::int64_t; using floating_type = double; using string_type = std::string; template&amp;lt;typename T&amp;gt; using array_type = std::vector&amp;lt;T&amp;gt;; template&amp;lt;typename K, typename T&amp;gt; using table_type = std::unordered_map&amp;lt;K, T&amp;gt;; static result&amp;lt;integer_type, error_info&amp;gt; parse_int(const std::string&amp;amp; str, const source_location src, const std::uint8_t base); static result&amp;lt;floating_type, error_info&amp;gt; parse_float(const std::string&amp;amp; str, const source_location src, const bool is_hex); }; using value = basic_value&amp;lt;type_config&amp;gt;; using table = typename value::table_type; using array = typename value::array_type; } // toml static Member Functions # parse_int(str, src, base) # static result&amp;lt;integer_type, error_info&amp;gt; parse_int(const std::string&amp;amp; str, const source_location src, const std::uint8_t base); If you use a type as integer_type that cannot utilize standard stream operators, implement this function.</description></item><item><title>value_t.hpp</title><link>https://toruniina.github.io/toml11/docs/reference/value_t/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toruniina.github.io/toml11/docs/reference/value_t/</guid><description>value_t.hpp # value_t # value_t is used to handle the type information of toml::value.
namespace toml { enum class value_t : std::uint8_t { empty = 0, boolean = 1, integer = 2, floating = 3, string = 4, offset_datetime = 5, local_datetime = 6, local_date = 7, local_time = 8, array = 9, table = 10 }; std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, value_t t); std::string to_string(value_t t); } // toml Non-member Functions # Stream Operator # std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, value_t t); Outputs the string representation of the value_t to the stream.</description></item><item><title>value.hpp</title><link>https://toruniina.github.io/toml11/docs/reference/value/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toruniina.github.io/toml11/docs/reference/value/</guid><description>value.hpp # value.hpp defines basic_value.
toml::basic_value # basic_value is a class that stores TOML values.
namespace toml { template &amp;lt;class TypeConfig&amp;gt; class basic_value; // Defined in types.hpp // using value = basic_value&amp;lt;type_config&amp;gt;; // using table = typename basic_value&amp;lt;type_config&amp;gt;::table_type; // using array = typename basic_value&amp;lt;type_config&amp;gt;::array_type; template&amp;lt;typename TC&amp;gt; bool operator==(const basic_value&amp;lt;TC&amp;gt;&amp;amp;, const basic_value&amp;lt;TC&amp;gt;&amp;amp;); template&amp;lt;typename TC&amp;gt; bool operator!=(const basic_value&amp;lt;TC&amp;gt;&amp;amp;, const basic_value&amp;lt;TC&amp;gt;&amp;amp;); template&amp;lt;typename TC&amp;gt; bool operator&amp;lt; (const basic_value&amp;lt;TC&amp;gt;&amp;amp;, const basic_value&amp;lt;TC&amp;gt;&amp;amp;); template&amp;lt;typename TC&amp;gt; bool operator&amp;lt;=(const basic_value&amp;lt;TC&amp;gt;&amp;amp;, const basic_value&amp;lt;TC&amp;gt;&amp;amp;); template&amp;lt;typename TC&amp;gt; bool operator&amp;gt; (const basic_value&amp;lt;TC&amp;gt;&amp;amp;, const basic_value&amp;lt;TC&amp;gt;&amp;amp;); template&amp;lt;typename TC&amp;gt; bool operator&amp;gt;=(const basic_value&amp;lt;TC&amp;gt;&amp;amp;, const basic_value&amp;lt;TC&amp;gt;&amp;amp;); } //toml Member Types # The following member types are defined.</description></item><item><title>version.hpp</title><link>https://toruniina.github.io/toml11/docs/reference/version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toruniina.github.io/toml11/docs/reference/version/</guid><description>version.hpp # In version.hpp, macros related to the version information of toml11 are defined.
Macros # TOML11_VERSION_MAJOR # The major version of toml11.
TOML11_VERSION_MINOR # The minor version of toml11.
TOML11_VERSION_PATCH # The patch version of toml11.
Function # license_notice # namespace toml { const char* license_notice() noexcept; } Returns the license notice.
Provided for convenience when redistributing without source code.</description></item><item><title>visit.hpp</title><link>https://toruniina.github.io/toml11/docs/reference/visit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toruniina.github.io/toml11/docs/reference/visit/</guid><description>visit.hpp # In visit.hpp, toml::visit is defined.
toml::visit # Functions # namespace toml { template&amp;lt;typename Visitor, typename TC&amp;gt; /* Return value when Visitor is called with a value of basic_value&amp;lt;TC&amp;gt; */ visit(Visitor&amp;amp;&amp;amp; visitor, const basic_value&amp;lt;TC&amp;gt;&amp;amp; v); template&amp;lt;typename Visitor, typename TC&amp;gt; /* Return value when Visitor is called with a value of basic_value&amp;lt;TC&amp;gt; */ visit(Visitor&amp;amp;&amp;amp; visitor, basic_value&amp;lt;TC&amp;gt;&amp;amp; v); template&amp;lt;typename Visitor, typename TC&amp;gt; /* Return value when Visitor is called with a value of basic_value&amp;lt;TC&amp;gt; */ visit(Visitor&amp;amp;&amp;amp; visitor, basic_value&amp;lt;TC&amp;gt;&amp;amp;&amp;amp; v); } toml::visit calls the overload of Visitor corresponding to the type held by basic_value&amp;lt;TC&amp;gt;, and returns the result.</description></item></channel></rss>